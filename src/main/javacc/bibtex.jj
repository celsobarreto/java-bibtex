/*
 * Copyright (c) 2012 University of Tartu
 */
PARSER_BEGIN(BibTeXParser)
package org.jbibtex;

import java.io.*;
import java.util.*;

public class BibTeXParser {

	private BibTeXDatabase database = null;

	private long id = 1L;


	public BibTeXParser(){
		this(new StringReader(""));
	}

	public BibTeXDatabase parse(Reader reader) throws IOException, ParseException {
		ReInit(reader);

		return Database();
	}

	/**
	 * Checks the <code>string</code> argument before constructing a new {@link ReferenceValue} instance.
	 * The default behaviour is to prohibit unresolved references.
	 *
	 * @throws ObjectResolutionException If the <code>string</code> is <code>null</code>.
	 *
	 * @see BibTeXDatabase#resolveString(Key)
	 * @see BibTeXParser#getMacros()
	 */
	public void checkStringResolution(Key key, BibTeXString string){

		if(string == null){
			throw new ObjectResolutionException(key);
		}
	}

	private void resolveCrossReferences(){
		Map<Key, BibTeXEntry> entries = getDatabase().getEntries();

		for(BibTeXEntry entry : entries.values()){
			Map<Key, Value> fields = entry.getFields();

			Value value = fields.get(BibTeXEntry.KEY_CROSSREF);
			if((value == null) || (value instanceof CrossReferenceValue)){
				continue;
			}

			Key key = new Key(value.toUserString());

			BibTeXEntry object = getDatabase().resolveEntry(key);
			checkCrossReferenceResolution(key, object);

			entry.addField(BibTeXEntry.KEY_CROSSREF, new CrossReferenceValue(value, object));
		}
	}

	/**
	 * Checks the <code>entry</code> argument before constructing a new {@link CrossReferenceValue} instance.
	 * The default behaviour is to prohibit unresolved references.
	 *
	 * @throws ObjectResolutionException If the <code>entry</code> is <code>null</code>.
	 *
	 * @see BibTeXDatabase#resolveEntry(Key)
	 */
	public void checkCrossReferenceResolution(Key key, BibTeXEntry entry){

		if(entry == null){
			throw new ObjectResolutionException(key);
		}
	}

	/**
	 * Generates a key value for an anonymous BibTeX bibliography database entry.
	 *
	 * @see BibTeXEntry#getKey
	 * @see BibTeXDatabase#resolveEntry(Key)
	 */
	public String nextKey(){
		return String.valueOf("jbibtex-" + this.id++);
	}

	public BibTeXDatabase getDatabase(){
		return this.database;
	}

	private void setDatabase(BibTeXDatabase database){
		this.database = database;
	}

	static
	public KeyMap<BibTeXString> getMacros(){
		return BibTeXParser.macros;
	}

	static
	public void addMacro(String key, String value){
		addMacro(new BibTeXString(new Key(key), new StringValue(value, StringValue.Style.BRACED)));
	}

	static
	public void addMacro(BibTeXString macro){
		BibTeXParser.macros.put(macro.getKey(), macro);
	}

	static
	public void removeMacro(BibTeXString macro){
		BibTeXParser.macros.remove(macro.getKey());
	}

	static
	private boolean isDigitString(String string){

		for(int i = 0; i < string.length(); i++){
			char c = string.charAt(i);

			// Only ASCII digits from '0' to '9'
			if(c < '0' || c > '9'){
				return false;
			}
		}
		
		return (string.length() > 0);
	}

	private static final KeyMap<BibTeXString> macros = new KeyMap<BibTeXString>();

	static {
		addMacro("jan", "January");
		addMacro("feb", "February");
		addMacro("mar", "March");
		addMacro("apr", "April");
		addMacro("may", "May");
		addMacro("jun", "June");
		addMacro("jul", "July");
		addMacro("aug", "August");
		addMacro("sep", "September");
		addMacro("oct", "October");
		addMacro("nov", "November");
		addMacro("dec", "December");
	}


	static
	private class Field {

		private Key key = null;

		private Value value = null;


		private Field(Key key, Value value){
			setKey(key);
			setValue(value);
		}

		public Key getKey(){
			return this.key;
		}

		private void setKey(Key key){
			this.key = key;
		}

		public Value getValue(){
			return this.value;
		}

		private void setValue(Value value){
			this.value = value;
		}
	}
}
PARSER_END(BibTeXParser)

<DEFAULT>
MORE :
{
	"%" : IN_INLINE_COMMENT
}

<IN_INLINE_COMMENT>
SPECIAL_TOKEN :
{
	< INLINE_COMMENT : ( ~["\r", "\n"] )* ("\r" | "\n" | "\r\n")? > : DEFAULT
}

<IN_INLINE_COMMENT>
MORE :
{
	< ~[] >
}

<IN_LITERAL>
TOKEN :
{
	< TEXT : ~[] >
}

<DEFAULT>
SKIP :
{
	"\t"
	|
	"\n"
	|
	"\f"
	|
	"\r"
	|
	" "
}

<DEFAULT>
TOKEN :
{
	< AT : "@" >
	|
	< COMMA : "," >
	|
	< EQUALS : "=" >
	|
	< HASH : "#" >
	|
	< LBRACE : "{">
	|
	< LPAREN : "(" >
	|
	< QUOTE : "\"" >
	|
	< RBRACE : "}" >
	|
	< RPAREN : ")" > 
}

<DEFAULT>
TOKEN :
{
	< COMMENT : ( ["c", "C"] ["o", "O"] ["m", "M"] ["m", "M"] ["e", "E"] ["n", "N"] ["t", "T"] ) >
	|
	< INCLUDE : ( ["i", "I"] ["n", "N"] ["c", "C"] ["l", "L"] ["u", "U"] ["d", "D"] ["e", "E"] ) >
	|
	< PREAMBLE : ( ["p", "P"] ["r", "R"] ["e", "E"] ["a", "A"] ["m", "M"] ["b", "B"] ["l", "L"] ["e", "E"] ) >
	|
	< STRING : ( ["s", "S"] ["t", "T"] ["r", "R"] ["i", "I"] ["n", "N"] ["g", "G"] ) >
}

<DEFAULT>
TOKEN :
{
	< NAME : ( <ASCII_LETTER> | <ASCII_DIGIT> | <UNICODE_LETTER> ) ( <ASCII_LETTER> | <ASCII_DIGIT> | <UNICODE_LETTER> | <NAME_SPACING> )* >
	|
	< #ASCII_LETTER : ["a"-"z", "A"-"Z"] >
	|
	< #ASCII_DIGIT : ["0"-"9"] >
	|
	< #UNICODE_LETTER : 
		[
			"\u00c0"-"\u00d6",
			"\u00d8"-"\u00f6",
			"\u00f8"-"\u00ff",
			"\u0100"-"\u1fff"
		]
	>
	|
	< #NAME_SPACING : ["'", "+", "-", ".", "/", ":", "_"] >
}

private BibTeXDatabase Database() :
{
	BibTeXDatabase database = new BibTeXDatabase();

	BibTeXObject object = null;
}
{
	{
		setDatabase(database);
	}

	( object = Object() { database.addObject(object); } )* <EOF>

	{
		resolveCrossReferences();

		setDatabase(null);

		return database;
	}
}

private BibTeXObject Object() :
{
	BibTeXObject object;
}
{
	(
		LOOKAHEAD( <AT> <COMMENT> )
		object = Comment()
		|
		LOOKAHEAD( <AT> <INCLUDE> )
		object = Include()
		|
		LOOKAHEAD( <AT> <PREAMBLE> )
		object = Preamble()
		|
		LOOKAHEAD( <AT> <STRING> )
		object = String()
		|
		object = Entry()
	)

	{
		return object;
	}
}

private BibTeXComment Comment() :
{
	String string;
}
{
	<AT> <COMMENT>
	(
		<LBRACE> string = Literal(1, "}")
	)

	{
		return new BibTeXComment(new StringValue(string, StringValue.Style.BRACED));
	}
}

private BibTeXInclude Include():
{
	String string;
}
{
	<AT> <INCLUDE>
	(
		<LBRACE> string = Literal(1, "}")
	)

	{
		BibTeXDatabase database;

		try {
			Reader reader = new FileReader(string);

			try {
				BibTeXParser parser = new BibTeXParser();

				database = parser.parse(reader);
			} finally {
				reader.close();
			}
		} catch(Exception e){
			throw new ParseException(e.getMessage());
		}

		return new BibTeXInclude(new StringValue(string, StringValue.Style.BRACED), database);
	}
}

private BibTeXPreamble Preamble() :
{
	Value value;
}
{
	<AT> <PREAMBLE>
	(
		<LPAREN> value = Value() <RPAREN>
		|
		<LBRACE> value = Value() <RBRACE>
	)

	{
		return new BibTeXPreamble(value);
	}
}

private BibTeXString String() :
{
	Field field;
}
{
	<AT> <STRING>
	(
		<LPAREN> field = Assignment() <RPAREN>
		|
		<LBRACE> field = Assignment() <RBRACE>
	)

	{
		return new BibTeXString(field.getKey(), field.getValue());
	}
}

private BibTeXEntry Entry() :
{
	Token type;

	Token key = null;

	List<Field> fields;
}
{
	<AT> type = <NAME>
	(
		<LPAREN> 
		(
			LOOKAHEAD( Identifier() <COMMA> )
			key = Identifier() <COMMA> fields = AssignmentList()
			|
			fields = AssignmentList()
		)
		( <COMMA> )? <RPAREN>
		|
		<LBRACE> 
		(
			LOOKAHEAD( Identifier() <COMMA> )
			key = Identifier() <COMMA> fields = AssignmentList()
			|
			fields = AssignmentList()
		)
		( <COMMA> )? <RBRACE>
	)

	{
		BibTeXEntry entry = new BibTeXEntry(new Key(type.image), key != null ? new Key(key.image) : new Key(nextKey()));

		for(Field field : fields){
			entry.addField(field.getKey(), field.getValue());
		}

		return entry;
	}
}

private Field Assignment() :
{
	Key key;

	Value value;
}
{
	key = Key() <EQUALS> value = Value()

	{
		return new Field(key, value);
	}
}

private List<Field> AssignmentList() :
{
	List<Field> fields = new ArrayList<Field>();

	Field field;
}
{
	field = Assignment() { fields.add(field); } ( LOOKAHEAD( <COMMA> Name() ) <COMMA> field = Assignment() { fields.add(field); } )*

	{
		return fields;
	}
}

private Token Identifier() :
{
	Token token;
}
{
	(
		token = Name()
	)

	{
		return token;
	}
}

private Token Name() :
{
	Token token;
}
{
	(
		token = <COMMENT>
		|
		token = <INCLUDE>
		|
		token = <PREAMBLE>
		|
		token = <STRING>
		|
		token = <NAME>
	)

	{
		return token;
	}
}

private Key Key() :
{
	Token token;
}
{
	token = Name()

	{
		return new Key(token.image);
	}
}

private Value Value() :
{
	Value left;

	Value right = null;
}
{
	left = SimpleValue() ( <HASH> right = Value() )?

	{
		if(right != null){
			return new ConcateValue(left, right);
		}

		return left;
	}
}

private Value SimpleValue() :
{
	String string;

	Token token;
}
{
	(
		<LBRACE> string = Literal(1, "}")
		{
			return new StringValue(string, StringValue.Style.BRACED);
		}
		|
		<QUOTE> string = Literal(0, "\"")
		{
			return new StringValue(string, StringValue.Style.QUOTED);
		}
		|
		token = Name()
		{
			boolean digits = isDigitString(token.image);

			if(!digits){
				KeyValue value = new KeyValue(token.image);

				Key key = value.toKey();

				BibTeXString object = getDatabase().resolveString(key);
				if(object == null){
					object = (BibTeXParser.getMacros()).get(key);
				}

				checkStringResolution(key, object);

				return new ReferenceValue(value, object);
			} else

			{
				return new DigitStringValue(token.image);
			}
		}
	)
}

JAVACODE
private String Literal(int braceLevel, String delimiter){
	StringBuffer sb = new StringBuffer(64);

	if(braceLevel < 0){
		throw new IllegalArgumentException();
	}

	token_source.SwitchTo(IN_LITERAL);

	for(Token prevToken = null, token = getNextToken(); true; prevToken = token, token = getNextToken()){
		boolean escaped = (prevToken != null && "\\".equals(prevToken.image));

		if(!escaped){

			if("{".equals(token.image)){
				braceLevel++;
			} else

			if("}".equals(token.image)){
				braceLevel--;
			}
		}// End if

		if(delimiter.equals(token.image) && braceLevel == 0){
			break;
		}

		sb.append(token.image);
	}

	token_source.SwitchTo(DEFAULT);

	return StringUtil.removeIndent(sb.toString());
}